<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.backend.mapper.PostMapper">

    <select id="listPostPageOrderByGmtCreateDesc" parameterType="long" resultMap="postToShow">
        select post.id as id,
               post.publisher_id as publisher_id,
               post.status as status,
               post.post_type_id as post_type_id,
               post.message as message,
               post.image_urls as image_urls,
               post.gmt_create as gmt_create,
               post.gmt_modified as gmt_modified,
               post.deleted as deleted,
               user.username as username,
               post_type.name as post_type_name,
               ${currentUserId} as currentUserId
        from post,user,post_type
        where post.deleted = 0
        and post.status = 0
        and post.publisher_id = user.id
        and post.post_type_id = post_type.id
        order by gmt_create desc,id desc
    </select>
    <select id="fuzzyListPostPageOrderByGmtCreateDesc" parameterType="map" resultMap="postToShow">
        select id,
               publisher_id,
               status,
               post_type_id,
               message,
               image_urls,
               gmt_create,
               gmt_modified,
               deleted,
               ${queryMap.currentUserId} as currentUserId
        from post
        where deleted = 0
          and status = 0
          and message like concat('%',#{queryMap.content},'%')
        order by gmt_create desc,id desc
    </select>

    <select id="listPostPageByTypeId" parameterType="long" resultMap="postToShow">
        select id,
               publisher_id,
               status,
               post_type_id,
               message,
               image_urls,
               gmt_create,
               gmt_modified,
               deleted,
               ${queryMap.currentUserId} as currentUserId
        from post
        where deleted = 0
          and status = 0
          and post_type_id = #{queryMap.typeId}
        order by gmt_create desc,id desc
    </select>

    <select id="selectTopTenLikedPost" parameterType="map" resultMap="postToShow">
        select post.id,
               post.publisher_id,
               post.status,
               post.post_type_id,
               post.message,
               post.image_urls,
               post.gmt_create,
               post.gmt_modified,
               post.deleted,
               ${currentUserId} as currentUserId
        from post,
             (select  post_like.post_id,count(distinct post_like.id) as cnt
              from post_like,post
              where post_like.deleted = 0 and  post_like.post_id = post.id and post.deleted = 0 and post.status=0
              group by post_like.post_id
              order by count(distinct post_like.id) desc
              limit 0,10
             ) as top
        where  top.post_id = post.id
        order by top.cnt desc
    </select>
    
    <resultMap id="postToShow" type="com.team.backend.model.Post">
        <id column="id" property="id"/>
        <result property="publisherId" column="publisher_id"/>
        <result property="status" column="status"/>
        <result property="postTypeId" column="post_type_id"/>
        <result property="message" column="message"/>
        <result property="imageUrls" column="image_urls"/>
        <result property="gmtCreate" column="gmt_create"/>
        <result property="gmtModified" column="gmt_modified"/>
        <result property="deleted" column="deleted"/>
        <result property="currentUserId" column="currentUserId"/>
        <result property="publisherName" column="username"/>
        <result property="postTypeName" column="post_type_name"/>
        <association property="eyeOnNum" javaType="integer" column="id" select="countPostEyeOnByPostId"/>
        <association property="likeNum" javaType="integer" column="id" select="countPostLikeByPostId"/>
        <association property="isEyeOn" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="countCurrentUserEyeOnById"/>
        <association property="isLike" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="countCurrentUserLikeById"/>
        <association property="rewardNum" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="sumCurrentUserRewardNumById"/>
        <collection property="comments" ofType="com.team.backend.model.PostComment" column="id"
                    select="selectPostCommentByPostId">
                <result property="nameFrom" column="name_from"/>
        </collection>
    </resultMap>
    
    <select id="selectPostCommentByPostId" resultType="com.team.backend.model.PostComment">
        select post_comment.id as id,
               post_comment.gmt_create as gmt_create,
               post_comment.gmt_modified as gmt_modified,
               post_comment.deleted as deleted,
               pre_id,
               post_id,
               id_from,
               post_comment.status as status,
               message,
               id_to,
               user.username as name_from
        from post_comment,user
        where post_id = #{id}
        and post_comment.deleted = 0
        and post_comment.id_from = user.id
        order by post_comment.gmt_create
        limit 0,1;
    </select>

    <select id="selectUserNameById" resultType="string">
        select username from user where id = #{publisher_id} and deleted = 0
    </select>

    <select id="selectPostTypeNameById" resultType="string">
        select name from post_type where id = #{post_type_id} and deleted = 0
    </select>

    <select id="countPostEyeOnByPostId" resultType="integer">
        select count(distinct id) from post_eye_on where post_id = #{id} and deleted = 0
    </select>

    <select id="countPostLikeByPostId" resultType="integer">
        select count(distinct id) from post_like where post_id = #{id} and deleted = 0
    </select>

    <select id="countCurrentUserEyeOnById" resultType="integer">
        select count(distinct id)
        from post_eye_on
        where post_id = #{id}
        and id_from = #{currentUserId}
        and deleted = 0
    </select>

    <select id="countCurrentUserLikeById" resultType="integer">
        select count(distinct id)
        from post_like
        where deleted = 0
        and post_id = #{id}
        and id_from = #{currentUserId}
    </select>

    <select id="sumCurrentUserRewardNumById" resultType="integer">
        select IFNULL(sum(amount),0)
        from post_reward
        where deleted = 0
        and post_id = #{id}
        and id_from = #{currentUserId}
    </select>
</mapper>
