<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.backend.mapper.PostMapper">

    <select id="listPostPageOrderByGmtCreateDesc" parameterType="long" resultMap="postToShowOptimized2">
        SELECT
            posts.*,
            comments.*
        FROM
            (
                SELECT
                    posts.*,
                    IFNULL(reward.reward_num,0) AS reward_num
                FROM
                    (
                        SELECT
                            posts.*,
                            count(liked.user_liked) AS is_liked
                        FROM
                            (
                                SELECT
                                    posts.*,
                                    COUNT(post_like.id) AS like_num
                                FROM
                                    (
                                        SELECT
                                            posts.*,
                                            COUNT(is_eye_on) AS is_eye_on
                                        FROM
                                            (
                                                SELECT
                                                    posts.*,
                                                    count(post_eye_on.id) AS eye_on_num
                                                FROM
                                                    (
                                                        SELECT
                                                            post.id AS id,
                                                            post.publisher_id AS publisher_id,
                                                            post.`status` AS `status`,
                                                            post.post_type_id AS post_type_id,
                                                            post.message AS message,
                                                            post.image_urls AS image_urls,
                                                            post.gmt_create AS gmt_create,
                                                            post.gmt_modified AS gmt_modified,
                                                            post.deleted AS deleted,
                                                            `user`.username AS username,
                                                            post_type.`name` AS post_type_name,
                                                            #{currentUserId} AS currentUserId
                                                        FROM
                                                            post,
                                                            `user`,
                                                            post_type
                                                        WHERE
                                                            post.deleted = 0 AND
                                                            post.`status` = 0 AND
                                                            post.publisher_id = `user`.id AND
                                                            post.post_type_id = post_type.id
                                                        ORDER BY
                                                            gmt_create DESC,
                                                            id DESC
                                                    ) AS posts
                                                        LEFT JOIN
                                                    post_eye_on
                                                    ON
                                                        (
                                                            posts.id = post_eye_on.post_id
                                                            )
                                                GROUP BY
                                                    posts.id
                                            ) AS posts
                                                LEFT JOIN
                                            (
                                                SELECT
                                                    post_eye_on.post_id,
                                                    count(distinct id) AS is_eye_on
                                                FROM
                                                    post_eye_on
                                                WHERE
                                                    deleted = 0 AND
                                                    id_from = #{currentUserId}
                                                GROUP BY
                                                    post_eye_on.post_id
                                            ) AS eye_on
                                            ON
                                                (
                                                    posts.id = eye_on.post_id
                                                    )
                                        GROUP BY
                                            posts.id
                                    ) AS posts
                                        LEFT JOIN
                                    post_like
                                    ON
                                        (
                                            post_like.post_id = posts.id
                                            )
                                GROUP BY
                                    posts.id
                            ) AS posts
                                LEFT JOIN
                            (
                                SELECT
                                    post_id,
                                    count(distinct id) AS user_liked
                                FROM
                                    post_like
                                WHERE
                                    deleted = 0 AND
                                    id_from = #{currentUserId}
                                GROUP BY
                                    post_id
                            ) AS liked
                            ON
                                (
                                    posts.id = liked.post_id
                                    )
                        GROUP BY
                            posts.id
                    ) AS posts
                        LEFT JOIN
                    (
                        SELECT
                            post_id,
                            sum(amount) AS reward_num
                        FROM
                            post_reward
                        WHERE
                            deleted = 0 AND
                            id_from = #{currentUserId}
                        GROUP BY
                            post_id
                    ) AS reward
                    ON
                        (
                            posts.id = reward.post_id
                            )
            ) AS posts
                LEFT JOIN
            (
                SELECT
                    post_comment.id AS comment_id,
                    post_comment.gmt_create AS comment_gmt_create,
                    post_comment.gmt_modified AS comment_gmt_modified,
                    post_comment.deleted AS comment_deleted,
                    pre_id AS comment_pre_id,
                    post_id AS comment_post_id,
                    id_from AS comment_id_from,
                    post_comment.`status` AS comment_status,
                    message AS comment_message,
                    id_to AS comment_id_to,
                    `user`.username AS comment_name_from
                FROM
                    post_comment,
                    `user`
                WHERE
                    post_comment.deleted = 0 AND
                    post_comment.id_from = `user`.id AND
                        post_comment.id IN ((SELECT min(post_comment.id) from post_comment WHERE deleted=0 and status=0 GROUP BY post_id))
                ORDER BY
                    post_comment.gmt_create ASC
            ) AS comments
            ON
                (
                    comments.comment_post_id = posts.id
                    )
    </select>
    <select id="fuzzyListPostPageOrderByGmtCreateDesc" parameterType="map" resultMap="postToShowOptimized2">
        SELECT
            posts.*,
            comments.*
        FROM
            (
                SELECT
                    posts.*,
                    IFNULL(reward.reward_num,0) AS reward_num
                FROM
                    (
                        SELECT
                            posts.*,
                            count(liked.user_liked) AS is_liked
                        FROM
                            (
                                SELECT
                                    posts.*,
                                    COUNT(post_like.id) AS like_num
                                FROM
                                    (
                                        SELECT
                                            posts.*,
                                            COUNT(is_eye_on) AS is_eye_on
                                        FROM
                                            (
                                                SELECT
                                                    posts.*,
                                                    count(post_eye_on.id) AS eye_on_num
                                                FROM
                                                    (
                                                        SELECT
                                                            post.id AS id,
                                                            post.publisher_id AS publisher_id,
                                                            post.`status` AS `status`,
                                                            post.post_type_id AS post_type_id,
                                                            post.message AS message,
                                                            post.image_urls AS image_urls,
                                                            post.gmt_create AS gmt_create,
                                                            post.gmt_modified AS gmt_modified,
                                                            post.deleted AS deleted,
                                                            `user`.username AS username,
                                                            post_type.`name` AS post_type_name,
                                                            #{currentUserId} AS currentUserId
                                                        FROM
                                                            post,
                                                            `user`,
                                                            post_type
                                                        WHERE
                                                            post.message LIKE concat('%',#{content},'%') AND
                                                            post.deleted = 0 AND
                                                            post.`status` = 0 AND
                                                            post.publisher_id = `user`.id AND
                                                            post.post_type_id = post_type.id
                                                        ORDER BY
                                                            gmt_create DESC,
                                                            id DESC
                                                    ) AS posts
                                                        LEFT JOIN
                                                    post_eye_on
                                                    ON
                                                        (
                                                            posts.id = post_eye_on.post_id
                                                            )
                                                GROUP BY
                                                    posts.id
                                            ) AS posts
                                                LEFT JOIN
                                            (
                                                SELECT
                                                    post_eye_on.post_id,
                                                    count(distinct id) AS is_eye_on
                                                FROM
                                                    post_eye_on
                                                WHERE
                                                    deleted = 0 AND
                                                    id_from = #{currentUserId}
                                                GROUP BY
                                                    post_eye_on.post_id
                                            ) AS eye_on
                                            ON
                                                (
                                                    posts.id = eye_on.post_id
                                                    )
                                        GROUP BY
                                            posts.id
                                    ) AS posts
                                        LEFT JOIN
                                    post_like
                                    ON
                                        (
                                            post_like.post_id = posts.id
                                            )
                                GROUP BY
                                    posts.id
                            ) AS posts
                                LEFT JOIN
                            (
                                SELECT
                                    post_id,
                                    count(distinct id) AS user_liked
                                FROM
                                    post_like
                                WHERE
                                    deleted = 0 AND
                                    id_from = #{currentUserId}
                                GROUP BY
                                    post_id
                            ) AS liked
                            ON
                                (
                                    posts.id = liked.post_id
                                    )
                        GROUP BY
                            posts.id
                    ) AS posts
                        LEFT JOIN
                    (
                        SELECT
                            post_id,
                            sum(amount) AS reward_num
                        FROM
                            post_reward
                        WHERE
                            deleted = 0 AND
                            id_from = #{currentUserId}
                        GROUP BY
                            post_id
                    ) AS reward
                    ON
                        (
                            posts.id = reward.post_id
                            )
            ) AS posts
                LEFT JOIN
            (
                SELECT
                    post_comment.id AS comment_id,
                    post_comment.gmt_create AS comment_gmt_create,
                    post_comment.gmt_modified AS comment_gmt_modified,
                    post_comment.deleted AS comment_deleted,
                    pre_id AS comment_pre_id,
                    post_id AS comment_post_id,
                    id_from AS comment_id_from,
                    post_comment.`status` AS comment_status,
                    message AS comment_message,
                    id_to AS comment_id_to,
                    `user`.username AS comment_name_from
                FROM
                    post_comment,
                    `user`
                WHERE
                    post_comment.deleted = 0 AND
                    post_comment.id_from = `user`.id AND
                        post_comment.id IN ((SELECT min(post_comment.id) from post_comment WHERE deleted=0 and status=0 GROUP BY post_id))
                ORDER BY
                    post_comment.gmt_create ASC
            ) AS comments
            ON
                (
                    comments.comment_post_id = posts.id
                    )
    </select>

    <select id="listPostPageByTypeId" parameterType="long" resultMap="postToShowOptimized2">
        SELECT
            posts.*,
            comments.*
        FROM
            (
                SELECT
                    posts.*,
                    IFNULL(reward.reward_num,0) AS reward_num
                FROM
                    (
                        SELECT
                            posts.*,
                            count(liked.user_liked) AS is_liked
                        FROM
                            (
                                SELECT
                                    posts.*,
                                    COUNT(post_like.id) AS like_num
                                FROM
                                    (
                                        SELECT
                                            posts.*,
                                            COUNT(is_eye_on) AS is_eye_on
                                        FROM
                                            (
                                                SELECT
                                                    posts.*,
                                                    count(post_eye_on.id) AS eye_on_num
                                                FROM
                                                    (
                                                        SELECT
                                                            post.id AS id,
                                                            post.publisher_id AS publisher_id,
                                                            post.`status` AS `status`,
                                                            post.post_type_id AS post_type_id,
                                                            post.message AS message,
                                                            post.image_urls AS image_urls,
                                                            post.gmt_create AS gmt_create,
                                                            post.gmt_modified AS gmt_modified,
                                                            post.deleted AS deleted,
                                                            `user`.username AS username,
                                                            post_type.`name` AS post_type_name,
                                                            #{queryMap.currentUserId} AS currentUserId
                                                        FROM
                                                            post,
                                                            `user`,
                                                            post_type
                                                        WHERE
                                                            post.deleted = 0 AND
                                                            post.`status` = 0 AND
                                                            post.post_type_id = #{queryMap.typeId}  AND
                                                            post.publisher_id = `user`.id AND
                                                            post.post_type_id = post_type.id
                                                        ORDER BY
                                                            gmt_create DESC,
                                                            id DESC
                                                    ) AS posts
                                                        LEFT JOIN
                                                    post_eye_on
                                                    ON
                                                        (
                                                            posts.id = post_eye_on.post_id
                                                            )
                                                GROUP BY
                                                    posts.id
                                            ) AS posts
                                                LEFT JOIN
                                            (
                                                SELECT
                                                    post_eye_on.post_id,
                                                    count(distinct id) AS is_eye_on
                                                FROM
                                                    post_eye_on
                                                WHERE
                                                    deleted = 0 AND
                                                    id_from = #{queryMap.currentUserId}
                                                GROUP BY
                                                    post_eye_on.post_id
                                            ) AS eye_on
                                            ON
                                                (
                                                    posts.id = eye_on.post_id
                                                    )
                                        GROUP BY
                                            posts.id
                                    ) AS posts
                                        LEFT JOIN
                                    post_like
                                    ON
                                        (
                                            post_like.post_id = posts.id
                                            )
                                GROUP BY
                                    posts.id
                            ) AS posts
                                LEFT JOIN
                            (
                                SELECT
                                    post_id,
                                    count(distinct id) AS user_liked
                                FROM
                                    post_like
                                WHERE
                                    deleted = 0 AND
                                    id_from = #{queryMap.currentUserId}
                                GROUP BY
                                    post_id
                            ) AS liked
                            ON
                                (
                                    posts.id = liked.post_id
                                    )
                        GROUP BY
                            posts.id
                    ) AS posts
                        LEFT JOIN
                    (
                        SELECT
                            post_id,
                            sum(amount) AS reward_num
                        FROM
                            post_reward
                        WHERE
                            deleted = 0 AND
                            id_from = #{queryMap.currentUserId}
                        GROUP BY
                            post_id
                    ) AS reward
                    ON
                        (
                            posts.id = reward.post_id
                            )
            ) AS posts
                LEFT JOIN
            (
                SELECT
                    post_comment.id AS comment_id,
                    post_comment.gmt_create AS comment_gmt_create,
                    post_comment.gmt_modified AS comment_gmt_modified,
                    post_comment.deleted AS comment_deleted,
                    pre_id AS comment_pre_id,
                    post_id AS comment_post_id,
                    id_from AS comment_id_from,
                    post_comment.`status` AS comment_status,
                    message AS comment_message,
                    id_to AS comment_id_to,
                    `user`.username AS comment_name_from
                FROM
                    post_comment,
                    `user`
                WHERE
                    post_comment.deleted = 0 AND
                    post_comment.id_from = `user`.id AND
                        post_comment.id IN ((SELECT min(post_comment.id) from post_comment WHERE deleted=0 and status=0 GROUP BY post_id))
                ORDER BY
                    post_comment.gmt_create ASC
            ) AS comments
            ON
                (
                    comments.comment_post_id = posts.id
                    )
    </select>

    <select id="selectTopTenLikedPost" parameterType="map" resultMap="postToShow">
        select post.id,
               post.publisher_id,
               post.status,
               post.post_type_id,
               post.message,
               post.image_urls,
               post.gmt_create,
               post.gmt_modified,
               post.deleted,
               ${currentUserId} as currentUserId
        from post,
             (select  post_like.post_id,count(distinct post_like.id) as cnt
              from post_like,post
              where post_like.deleted = 0 and  post_like.post_id = post.id and post.deleted = 0 and post.status=0
              group by post_like.post_id
              order by count(distinct post_like.id) desc
              limit 0,10
             ) as top
        where  top.post_id = post.id
        order by top.cnt desc
    </select>

    <select id="selectPostByIdWithUserId" parameterType="map" resultMap="postToShowOptimized2">
        SELECT
            posts.*,
            comments.*
        FROM
            (
                SELECT
                    posts.*,
                    IFNULL(reward.reward_num,0) AS reward_num
                FROM
                    (
                        SELECT
                            posts.*,
                            count(liked.user_liked) AS is_liked
                        FROM
                            (
                                SELECT
                                    posts.*,
                                    COUNT(post_like.id) AS like_num
                                FROM
                                    (
                                        SELECT
                                            posts.*,
                                            COUNT(is_eye_on) AS is_eye_on
                                        FROM
                                            (
                                                SELECT
                                                    posts.*,
                                                    count(post_eye_on.id) AS eye_on_num
                                                FROM
                                                    (
                                                        SELECT
                                                            post.id AS id,
                                                            post.publisher_id AS publisher_id,
                                                            post.`status` AS `status`,
                                                            post.post_type_id AS post_type_id,
                                                            post.message AS message,
                                                            post.image_urls AS image_urls,
                                                            post.gmt_create AS gmt_create,
                                                            post.gmt_modified AS gmt_modified,
                                                            post.deleted AS deleted,
                                                            `user`.username AS username,
                                                            post_type.`name` AS post_type_name,
                                                            #{currentUserId} AS currentUserId
                                                        FROM
                                                            post,
                                                            `user`,
                                                            post_type
                                                        WHERE
                                                            post.deleted = 0 AND
                                                            post.`status` = 0 AND
                                                            post.id = #{postId} AND
                                                            post.publisher_id = `user`.id AND
                                                            post.post_type_id = post_type.id
                                                        ORDER BY
                                                            gmt_create DESC,
                                                            id DESC
                                                    ) AS posts
                                                        LEFT JOIN
                                                    post_eye_on
                                                    ON
                                                        (
                                                            posts.id = post_eye_on.post_id
                                                            )
                                                GROUP BY
                                                    posts.id
                                            ) AS posts
                                                LEFT JOIN
                                            (
                                                SELECT
                                                    post_eye_on.post_id,
                                                    count(distinct id) AS is_eye_on
                                                FROM
                                                    post_eye_on
                                                WHERE
                                                    deleted = 0 AND
                                                    id_from = #{currentUserId}
                                                GROUP BY
                                                    post_eye_on.post_id
                                            ) AS eye_on
                                            ON
                                                (
                                                    posts.id = eye_on.post_id
                                                    )
                                        GROUP BY
                                            posts.id
                                    ) AS posts
                                        LEFT JOIN
                                    post_like
                                    ON
                                        (
                                            post_like.post_id = posts.id
                                            )
                                GROUP BY
                                    posts.id
                            ) AS posts
                                LEFT JOIN
                            (
                                SELECT
                                    post_id,
                                    count(distinct id) AS user_liked
                                FROM
                                    post_like
                                WHERE
                                    deleted = 0 AND
                                    id_from = #{currentUserId}
                                GROUP BY
                                    post_id
                            ) AS liked
                            ON
                                (
                                    posts.id = liked.post_id
                                    )
                        GROUP BY
                            posts.id
                    ) AS posts
                        LEFT JOIN
                    (
                        SELECT
                            post_id,
                            sum(amount) AS reward_num
                        FROM
                            post_reward
                        WHERE
                            deleted = 0 AND
                            id_from = #{currentUserId}
                        GROUP BY
                            post_id
                    ) AS reward
                    ON
                        (
                            posts.id = reward.post_id
                            )
            ) AS posts
                LEFT JOIN
            (
                SELECT
                    post_comment.id AS comment_id,
                    post_comment.gmt_create AS comment_gmt_create,
                    post_comment.gmt_modified AS comment_gmt_modified,
                    post_comment.deleted AS comment_deleted,
                    pre_id AS comment_pre_id,
                    post_id AS comment_post_id,
                    id_from AS comment_id_from,
                    post_comment.`status` AS comment_status,
                    message AS comment_message,
                    id_to AS comment_id_to,
                    `user`.username AS comment_name_from
                FROM
                    post_comment,
                    `user`
                WHERE
                    post_comment.deleted = 0 AND
                    post_comment.id_from = `user`.id AND
                        post_comment.id IN ((SELECT min(post_comment.id) from post_comment WHERE deleted=0 and status=0 GROUP BY post_id))
                ORDER BY
                    post_comment.gmt_create ASC
            ) AS comments
            ON
                (
                    comments.comment_post_id = posts.id
                    )
    </select>

    <resultMap id="postToShow" type="com.team.backend.model.Post">
        <id column="id" property="id"/>
        <result property="publisherId" column="publisher_id"/>
        <result property="status" column="status"/>
        <result property="postTypeId" column="post_type_id"/>
        <result property="message" column="message"/>
        <result property="imageUrls" column="image_urls"/>
        <result property="gmtCreate" column="gmt_create"/>
        <result property="gmtModified" column="gmt_modified"/>
        <result property="deleted" column="deleted"/>
        <result property="currentUserId" column="currentUserId"/>
        <association property="publisherName" javaType="string" column="publisher_id" select="selectUserNameById"/>
        <association property="postTypeName" javaType="string" column="post_type_id" select="selectPostTypeNameById"/>
        <association property="eyeOnNum" javaType="integer" column="id" select="countPostEyeOnByPostId"/>
        <association property="likeNum" javaType="integer" column="id" select="countPostLikeByPostId"/>
        <association property="isEyeOn" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="countCurrentUserEyeOnById"/>
        <association property="isLike" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="countCurrentUserLikeById"/>
        <association property="rewardNum" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="sumCurrentUserRewardNumById"/>
        <collection property="comments" ofType="com.team.backend.model.PostComment" column="id"
                    select="selectPostCommentByPostId">
            <result property="nameFrom" column="name_from"/>
        </collection>
    </resultMap>

    <resultMap id="postToShowOptimized" type="com.team.backend.model.Post">
        <id column="id" property="id"/>
        <result property="publisherId" column="publisher_id"/>
        <result property="status" column="status"/>
        <result property="postTypeId" column="post_type_id"/>
        <result property="message" column="message"/>
        <result property="imageUrls" column="image_urls"/>
        <result property="gmtCreate" column="gmt_create"/>
        <result property="gmtModified" column="gmt_modified"/>
        <result property="deleted" column="deleted"/>
        <result property="currentUserId" column="currentUserId"/>
        <result property="publisherName" column="username"/>
        <result property="postTypeName" column="post_type_name"/>
        <association property="eyeOnNum" javaType="integer" column="id" select="countPostEyeOnByPostId"/>
        <association property="likeNum" javaType="integer" column="id" select="countPostLikeByPostId"/>
        <association property="isEyeOn" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="countCurrentUserEyeOnById"/>
        <association property="isLike" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="countCurrentUserLikeById"/>
        <association property="rewardNum" javaType="integer" column="{id=id,currentUserId=currentUserId}"
                     select="sumCurrentUserRewardNumById"/>
        <collection property="comments" ofType="com.team.backend.model.PostComment" column="id"
                    select="selectPostCommentByPostId">
                <result property="nameFrom" column="name_from"/>
        </collection>
    </resultMap>

    <resultMap id="postToShowOptimized2" type="com.team.backend.model.Post">
        <id column="id" property="id"/>
        <result property="publisherId" column="publisher_id"/>
        <result property="status" column="status"/>
        <result property="postTypeId" column="post_type_id"/>
        <result property="message" column="message"/>
        <result property="imageUrls" column="image_urls"/>
        <result property="gmtCreate" column="gmt_create"/>
        <result property="gmtModified" column="gmt_modified"/>
        <result property="deleted" column="deleted"/>
        <result property="currentUserId" column="currentUserId"/>
        <result property="publisherName" column="username"/>
        <result property="postTypeName" column="post_type_name"/>
        <result property="eyeOnNum" column="eye_on_num" />
        <result property="likeNum" column="like_num" />
        <result property="isEyeOn" column="is_eye_on" />
        <result property="isLike" column="is_liked" />
        <result property="rewardNum" column="reward_num" />
        <collection property="comments" ofType="com.team.backend.model.PostComment" >
            <id property="id" column="comment_id"/>
            <result property="nameFrom" column="name_from"/>
            <result property="gmtCreate" column="comment_gmt_create"/>
            <result property="gmtModified" column="comment_gmt_modified"/>
            <result property="deleted" column="comment_deleted"/>
            <result property="preId" column="comment_pre_id"/>
            <result property="postId" column="comment_post_id"/>
            <result property="idFrom" column="comment_id_from"/>
            <result property="status" column="comment_status"/>
            <result property="message" column="comment_message"/>
            <result property="idTo" column="comment_id_to"/>
            <result property="nameFrom" column="comment_name_from"/>
        </collection>
    </resultMap>
    
    <select id="selectPostCommentByPostId" resultType="com.team.backend.model.PostComment">
        select post_comment.id as id,
               post_comment.gmt_create as gmt_create,
               post_comment.gmt_modified as gmt_modified,
               post_comment.deleted as deleted,
               pre_id,
               post_id,
               id_from,
               post_comment.status as status,
               message,
               id_to,
               user.username as name_from
        from post_comment,user
        where post_id = #{id}
        and post_comment.deleted = 0
        and post_comment.id_from = user.id
        order by post_comment.gmt_create
        limit 0,1;
    </select>

    <select id="selectUserNameById" resultType="string">
        select username from user where id = #{publisher_id} and deleted = 0
    </select>

    <select id="selectPostTypeNameById" resultType="string">
        select name from post_type where id = #{post_type_id} and deleted = 0
    </select>

    <select id="countPostEyeOnByPostId" resultType="integer">
        select count(distinct id) from post_eye_on where post_id = #{id} and deleted = 0
    </select>

    <select id="countPostLikeByPostId" resultType="integer">
        select count(distinct id) from post_like where post_id = #{id} and deleted = 0
    </select>

    <select id="countCurrentUserEyeOnById" resultType="integer">
        select count(distinct id)
        from post_eye_on
        where post_id = #{id}
        and id_from = #{currentUserId}
        and deleted = 0
    </select>

    <select id="countCurrentUserLikeById" resultType="integer">
        select count(distinct id)
        from post_like
        where deleted = 0
        and post_id = #{id}
        and id_from = #{currentUserId}
    </select>

    <select id="sumCurrentUserRewardNumById" resultType="integer">
        select IFNULL(sum(amount),0)
        from post_reward
        where deleted = 0
        and post_id = #{id}
        and id_from = #{currentUserId}
    </select>
</mapper>
